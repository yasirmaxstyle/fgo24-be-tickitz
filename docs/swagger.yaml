basePath: /
definitions:
  models.APIResponse:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  models.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.HTTPError:
    properties:
      error:
        type: integer
      message:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.PasswordResetRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - confirmPassword
    - email
    - password
    type: object
  models.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
    required:
    - new_password
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      lastLogin:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
info:
  contact: {}
  description: backend server of movie ticketing NOIR Project
  title: NOIR RESTful API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request reset password user with email
      parameters:
      - description: Forgot password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PasswordResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Request reset password if user forgot their password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user by blacklisting refresh token
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, and and confirm password
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Register a new user
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password user with new password
      parameters:
      - description: token request
        in: query
        name: token
        required: true
        type: string
      - description: Reset password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.HTTPError'
      summary: Reset password in new link provided
      tags:
      - auth
  /profile:
    get:
      description: Get current user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.HTTPError'
      security:
      - Token: []
      summary: Get user profile
      tags:
      - profile
securityDefinitions:
  Token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
